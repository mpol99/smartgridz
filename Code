#Hallo
import pandas as pd
import pypsa


pv_generation = pd.read_csv('generation.csv', delimiter=";", decimal=",")
consumption_data = pd.read_csv("consumption.csv", delimiter=";", decimal=",")

network = pypsa.Network()

network.add("Bus",
            "Consumer",
            carrier="load",
            p_set=0.0,
            v_nom=230.0)
            
for timestamp, consumption in consumption_data["Consumption"].iteritems():
    network.add("Load",
                f"Consumer_{timestamp.strftime('%Y%m%d%H%M')}",
                bus="Consumer",
                p_set=consumption/1000.0)  # Convert from kW to MW
                
import matplotlib.pyplot as plt

plt.plot(consumption_data["Consumption"].index, consumption_data["Consumption"]/1000.0)  # Convert from kW to MW
plt.xlabel("Time")
plt.ylabel("Power Demand (MW)")
plt.show()

####Neu####

import pypsa
import pandas as pd
network = pypsa.Network()
start = pd.Timestamp('2022-01-01', tz='utc')
end = pd.Timestamp('2022-01-02', tz='utc')
time_index = pd.date_range(start=start, end=end, freq='H')
# Load data from a CSV file
load_data = pd.read_csv('verbrauch.csv', parse_dates=['timestamp'], index_col='timestamp', usecols=['timestamp', 'load', 'bus'])
network.add("Bus", "Consumer")
for _, row in load_data.iterrows():
    load_name = str(row.name)
    network.add("Load", load_name)
    network.loads.loc[load_name, "bus"] = row['bus']
    network.loads.loc[load_name, "p_set"] = row['load']
    
    


###Erstellen des Netzwerks über Ordner###
#Dazu muss der Ordner "example" heruntergeladen werden und in das aktuelle Verzeichnis verschoben werden. 
Falls ihr die XML-Dateien bearbeiten wollt müsst ihr in den Systemsteuerungen unter "Region" das Listentrennzeichen auf ein Komma stellen.#

import pypsa
import numpy as np
network = pypsa.Network()
network.import_from_csv_folder('example')

import matplotlib.pyplot as plt
#Plotten von Buses und Links
plt.scatter(network.buses.x, network.buses.y, marker='o', color='r', label='Buses')
for bus in network.buses.index:
    x = network.buses.loc[bus, 'x']
    y = network.buses.loc[bus, 'y']
    plt.text(x, y, bus, ha='right', va='bottom')
    
for link in network.links.index:
    bus0 = network.links.loc[link, 'bus0']
    bus1 = network.links.loc[link, 'bus1']
    x = [network.buses.loc[bus0, 'x'], network.buses.loc[bus1, 'x']]
    y = [network.buses.loc[bus0, 'y'], network.buses.loc[bus1, 'y']]
    plt.plot(x, y, color='b', label='Links')

#Plotten des zeitlich veränderlichen Vebrauchs der sechs Verbraucher
time_index = network.snapshots
consumers = network.loads.index

for consumer in consumers:
    consumption = network.loads_t.p_set[consumer]
    plt.plot(time_index, consumption, label=consumer)

plt.show()


#Plotten der zeitlich veränderlichen Erzeugung der zwei Generatoren
time_index = network.snapshots
generators = network.generators.index

for generator in generators:
    output = network.generators_t.p_max_pu[generator]
    plt.plot(time_index, output, label=generator)


###Aktueller Code###
import pypsa
import numpy as np
import matplotlib.pyplot as plt

network = pypsa.Network()

network.import_from_csv_folder('example')

network.loads_t.p_set.plot()

network.generators_t.p_max_pu.plot()

import folium
m = folium.Map(location=(52.5443, 11.4036), zoom_start=15)

folium.Marker(
    location=[n.buses.loc["s", "x"],n.buses.loc["s", "y"]],
    tooltip="Photovoltaikanlage",
    popup=n.generators.p_nom["Solar"],
    icon=folium.Icon(color="green", icon='solar-panel' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["b", "x"],n.buses.loc["b", "y"]],
    tooltip="Biogasanlage",
    popup="Some Other Location",
    icon=folium.Icon(color="green", icon='seedling' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["n", "x"],n.buses.loc["n", "y"]],
    tooltip="Netzanschluss",
    popup="Some Other Location",
    icon=folium.Icon(color="green", icon='bolt' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["g", "x"],n.buses.loc["g", "y"]],
    tooltip="Zentralpunkt",
    popup="Some Other Location",
    icon=folium.Icon(color="red", icon='power-off' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v1", "x"],n.buses.loc["v1", "y"]],
    tooltip="Verbraucher 1",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v2", "x"],n.buses.loc["v2", "y"]],
    tooltip="Verbraucher 2",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v3", "x"],n.buses.loc["v3", "y"]],
    tooltip="Verbraucher 3",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v4", "x"],n.buses.loc["v4", "y"]],
    tooltip="Verbraucher 4",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v5", "x"],n.buses.loc["v5", "y"]],
    tooltip="Verbraucher 5",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v6", "x"],n.buses.loc["v6", "y"]],
    tooltip="Verbraucher 6",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v7", "x"],n.buses.loc["v7", "y"]],
    tooltip="Verbraucher 7",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

folium.Marker(
    location=[n.buses.loc["v8", "x"],n.buses.loc["v8", "y"]],
    tooltip="Verbraucher 8",
    popup="Some Other Location",
    icon=folium.Icon(color="blue", icon='industry' ,prefix='fa'),
).add_to(m)

m

###Dieser Befehl optimiert das Netzwerk (Achtung bei dieser Datengröße dauert die Optimierung -> lieber anderen Ordner "Test" mit Werten für nur einen Tag nutzen)###
n.optimize()
